# .github/workflows/android_build.yml
name: Flutter Android Build & Deploy

on:
  push:
    branches: [ release ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build" job remains the same, but we will make it output an artifact
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ${{ runner.tool_cache }}/dart
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Decode google-services.json
        # This step assumes google-services.json is part of your repo for simplicity.
        # If it's a secret, you would decode it here.
        run: echo "Skipping google-services.json decoding as it's assumed to be in repo."

      - name: Build Android App Bundle
        run: flutter build appbundle --flavor prod --release
        # Note: Your build.gradle must be configured to use your prod flavor's settings here.

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: color-rash-android-appbundle
          path: build/app/outputs/bundle/prod/app-prod-release.aab # <--- Ensure this path is correct for your 'prod' flavor build
          # The path might vary. Check your build logs for the exact path.

  # <--- NEW JOB: The "deploy" job depends on the "build" job --->
  deploy:
    # This job will only run if the "build" job was successful
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code again in the deploy job
      - uses: actions/checkout@v4

      # Step 2: Download the artifact generated by the "build" job
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: color-rash-android-appbundle
          path: build/app/outputs/bundle/release/ # Download the artifact to this path

      # Step 3: Set up the Google Play credentials from your GitHub secret
      - name: Setup Google Play Credentials
        run: |
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" > google_play_key.json
          echo "Google Play key file created."

      # Step 4: Use Fastlane to deploy the app bundle to Google Play Store
      - name: Deploy to Google Play Internal Testing
        uses: rnx-community/fastlane-actions@v2
        with:
          lane: 'internal_testing'
          # This should be your apps package name
          package_name: 'com.colorrash.color_rash' # <--- REPLACE with your actual package name
          aab_path: 'build/app/outputs/bundle/release/app-prod-release.aab' # <--- Adjust path if needed
          track: 'internal'
          # Use the JSON key file you created
          json_key: 'google_play_key.json'