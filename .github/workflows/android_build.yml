# .github/workflows/android_build.yml
name: Flutter Android Build & Deploy

on:
  push:
    branches: [ release ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-deploy: # <--- NEW: A single job for both build and deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ${{ runner.tool_cache }}/dart
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Setup .env.prod for Production Build
        run: |
          echo "${{ secrets.PROD_ENV_FILE_CONTENT }}" > .env.prod
          echo "Created .env.prod file from GitHub Secret."

#      - name: Setup google-services.json for Production Build
#        run: |
#          echo "${{ secrets.GOOGLE_SERVICES_JSON_PROD }}" > android/app/google-services.json
#          echo "Created google-services.json from GitHub Secret."

      - name: Build Android App Bundle
        run: flutter build appbundle --flavor prod --release

      # <--- NEW DEPLOYMENT STEPS: All in the same job now --->
      - name: Setup Ruby and Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Setup Google Play Credentials
        run: |
          mkdir -p fastlane
          echo "${{ secrets.GOOGLE_PLAY_JSON_KEY }}" > fastlane/google_play_key.json
          echo "Google Play key file created."

      - name: Set up Fastlane Match (if used)
        # This is optional and for code signing, but is often part of a full Fastlane setup.
        # This step is a placeholder if you decide to use Fastlane Match later.
        run: echo "Skipping Fastlane Match for now."

      - name: Deploy to Google Play Internal Testing
        run: |
          cd fastlane
          # The Fastfile is in the 'fastlane' directory.
          # We need to tell the Fastlane command where to look for it.
          # The path to the AAB file is relative to the workspace root.
          bundle exec fastlane internal_testing aab_path:build/app/outputs/bundle/prodRelease/app-prod-release.aab package_name:com.colorrash.color_rash track:internal json_key:fastlane/google_play_key.json
        env:
          # These environment variables are passed to the Fastlane process
          FLUTTER_ROOT: ${{ runner.tool_cache }}/flutter
          # Other environment variables as needed